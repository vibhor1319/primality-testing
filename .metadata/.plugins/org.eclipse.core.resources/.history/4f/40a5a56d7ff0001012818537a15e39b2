import java.math.BigInteger;
import java.util.Random;

/**
 * 
 */

/**
 * @author cfahim
 *
 */
public class MillerRabin {
  private BigInteger m_prime;
  private long m_2factor;
  private BigInteger m_oddfactor;
  private boolean m_isprime;  
  private long m_steps;
  private final BigInteger TWO = BigInteger.valueOf(2);
	
  public MillerRabin(BigInteger bi, long steps)
	{		
    this.setprime(bi);	
    this.m_steps = steps;
    m_isprime = PrimalityTest();
	}

  private boolean PrimalityTest() {
    if(!m_prime.testBit(0) || m_prime.compareTo(new BigInteger("3")) <= 0)
      return false;
        
    GetFactorization(m_prime.subtract(BigInteger.ONE));    
    
    for(long i = m_steps; i > 0; i--)
    {
      BigInteger rand = GetRandBigInt();
      BigInteger tester = rand.modPow(m_oddfactor, m_prime);
      
      if(tester.equals(BigInteger.ONE) || tester.equals(m_prime.subtract(BigInteger.ONE)))
      {
        continue;
      }
      else
      {
        boolean shouldrtn = true;
        for(long r = 1; r <= m_2factor - 1; r++)
        {
          tester = tester.modPow(TWO, m_prime);
          if(tester.equals(BigInteger.ONE))
            return false;
          else if(tester.equals(m_prime.subtract(BigInteger.ONE)))
          {
            shouldrtn = false;
            break;
          }
            
        }
        if(shouldrtn) 
          return false;
      }
    }
    
    
    return true;
       
    
  }

  private BigInteger GetRandBigInt(){
        
    String randBigIntstr = "";   
    
    Random rand = new Random();
    int numdigits = rand.nextInt(m_prime.toString().length());    
    for(int i = 0; i < numdigits; i++)
      randBigIntstr += rand.nextInt(10);  
    
    
    BigInteger rtn = new BigInteger(randBigIntstr);   
    return rtn;
  }
  
  private void GetFactorization(BigInteger divider) {
    // TODO Auto-generated method stub
    long rtn = 0;
    while(!divider.testBit(0))
    {
      rtn++;
      divider = divider.divide(TWO);
    }
    this.m_2factor = rtn;
    this.m_oddfactor = divider;
  }

  public void setprime(BigInteger m_prime) {
    this.m_prime = m_prime;
  }

  public BigInteger getprime() {
    return m_prime;
  }

  public boolean isPrime() {
    return m_isprime;
  }

}
